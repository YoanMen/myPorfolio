import React, { useState, useEffect, useRef } from "react"; import SelectItem from "./SelectItem.js"; import InputField from "../InputField.js"; import { inputValidation } from "../../../../scripts/inputValidation.js"; export default function ExternalLink({ value: e, onChange: t, selectedLinks: n }) { const [a, l] = useState(!1), [i, o] = useState([]), c = useRef(null), [s, r] = useState(""), [u, m] = useState({ url: null }); useEffect(() => { d() }, []), useEffect(() => { if (0 !== i.length && e) { let n = []; for (let t of e) { const e = i.find(e => e.id == t.id); if (!e) return; n.push({ id: e.id, name: e.name, svg: e.svg, url: t.url }) } t(n) } }, [i]); const d = async () => { const e = await fetch("/icons"), t = await e.json(); o(t) }, f = e => { const t = []; return e.forEach(e => { n.find(t => t.id == e.id) || t.push(React.createElement("option", { value: e.id }, e.name)) }), 0 == t.length && t.push(React.createElement("option", { value: "" }, "aucune icône")), t }, g = () => { if ("" == c.current.value) return; const e = inputValidation.link(s.trim()); if (e) return; const a = i.find(e => e.id == c.current.value); t([...n, { id: a.id, name: a.name, svg: a.svg, url: s }]) }, h = e => { t(n.filter(t => t.id != e)) }, p = () => { r(""), m({ url: null }), l(!a) }, v = e => { e = e.trim(), m({ ...u, url: inputValidation.link(e) }), r(e) }, E = e => e.map(e => React.createElement(SelectItem, { id: e.id, name: e.url, icon: e.svg, onClick: () => h(e.id) })); return React.createElement("div", null, React.createElement("label", { htmlFor: "container", className: "flex flex-col gap-2 mb-2 w-full text-sm font-medium" }, "liens externe"), !a && React.createElement("button", { onClick: p, className: "hover:text-button" }, "+ ajouter un lien externe"), a && React.createElement("div", { className: "flex gap-4 max-sm:flex-col" }, React.createElement("select", { ref: c, name: "externalLink", id: "externalLink", className: "max-w-40 w-full h-10 bg-primary border-stroke border-[1px] rounded-md px-4" }, f(i)), React.createElement(InputField, { label: "", id: "name", className: "max-w-80 mb-0", error: u.url, onChange: v, value: s }), React.createElement("div", { className: "flex gap-2 mb-auto mt-2" }, React.createElement("button", { className: "hover:text-button  transition-colors duration-200 ease-in-out", onClick: () => { g(), p() } }, "confirmer"), React.createElement("button", { className: "hover:text-button opacity-50 transition-colors duration-200 ease-in-out", onClick: p }, "annuler"))), n && React.createElement("div", { className: "flex flex-wrap w-full gap-2 mt-4" }, E(n))) } import React, { useState, useEffect } from "react"; import InputField from "../InputField.js"; import QuillEditor from "../QuillEditor.js"; import { inputValidation } from "../../../../scripts/inputValidation.js"; import { showNotification } from "../showNotification.js"; import Switch from "../ToggleSwitch.js"; import Technologies from "./Technologies.js"; import ExternalLinks from "./ExternalLinks.js"; export default function ProjectForm({ update: e = !1, csrf_token: t, project: n = { name: "", slug: "", isVisible: !1, content: "", links: [], technologies: [] } }) { const [a, l] = useState({ name: null, slug: null, content: null, technologies: null }), [i, o] = useState(!1), [c, s] = useState(!0), [r, u] = useState({ name: n.name, slug: n.slug, isVisible: n.isVisible, content: n.content, links: n.links, technologies: n.technologies }); let m = null; useEffect(() => { const e = e => { c || (e.preventDefault(), e.returnValue = !0) }; return window.addEventListener("beforeunload", e), () => { window.removeEventListener("beforeunload", e) } }, [c]), useEffect(() => { const e = document.getElementById("saveBtn"); return m = document.getElementById("editBtn"), e && e.addEventListener("click", x), m && m.addEventListener("click", E), () => { e && e.removeEventListener("click", x), m && m.removeEventListener("click", E) } }, [r]); const d = e => { e = e.trimLeft(), l({ ...a, name: inputValidation.checkLength(e, 60), slug: null }), u({ ...r, name: e, slug: inputValidation.string_to_slug(e) }), s(!1) }, f = e => { e = inputValidation.string_to_slug(e), l({ ...a, slug: inputValidation.checkLength(e, 100) }), u({ ...r, slug: e }), s(!1) }, g = e => { u({ ...r, isVisible: e }), s(!1) }, h = e => { u({ ...r, content: e }), s(!1) }, p = e => { l({ ...a, technologies: null }), u({ ...r, technologies: e }) }, v = e => { u({ ...r, links: e }) }, E = e => x(e, !0), x = async (i, c = !1) => { i.preventDefault(); const u = inputValidation.checkLength(r.name.trim(), 60), d = inputValidation.checkLength(r.slug, 100), f = 0 === r.content.length ? "Le contenu ne doit pas être vide" : null, g = 0 === r.technologies.length || null; l({ ...a, name: u, slug: d, content: f, technologies: g }), u || d || f || g || (s(!0), saveBtn.disabled = !0, m && (m.disabled = !0), o(!0), await fetch(`/admin/project/${e ? n.id : "create"}`, { method: "POST", body: JSON.stringify({ isVisible: r.isVisible, name: r.name, slug: r.slug, content: r.content, links: r.links, technologies: r.technologies, csrf_token: t }) }).then(e => e.json()).then(e => e.success ? c ? void window.location.reload() : void (document.location.href = "/admin/project/") : (o(!1), saveBtn.disabled = !1, s(!1), m && (m.disabled = !1), showNotification(e.error))).catch(e => { showNotification("erreur : " + e), o(!1), saveBtn.disabled = !1, s(!1), m && (m.disabled = !1) })) }; return React.createElement("div", { className: "font-eudoxus flex flex-col gap-4" }, React.createElement("div", { className: "flex gap-2 max-sm:flex-col-reverse justify-between" }, React.createElement("label", { className: "flex flex-col gap-2 justify-start w-fit", htmlFor: "visible" }, "visible", React.createElement(Switch, { name: "visible", id: "visible", label: "visible", className: "mt-1", onChange: g, checked: r.isVisible, disabled: i })), " ", React.createElement("a", { target: "_blank", ariaLabel: "aperçu de la page", href: "/projets/" + r.slug, className: "mr-2 hover:text-white transition-colors duration-150 max-sm:text-right" }, "aperçu de la page")), React.createElement("div", { className: "flex gap-4 max-sm:flex-col" }, React.createElement(InputField, { label: "nom", id: "name", className: "max-w-80", error: a.name, onChange: d, value: r.name, disabled: i }), React.createElement(InputField, { label: "slug", id: "slug", className: "max-w-80", error: a.slug, onChange: f, value: r.slug, disabled: i })), React.createElement(Technologies, { error: a.technologies, selectedTechnologies: r.technologies, onChange: p, value: r.technologies }), React.createElement("div", null, React.createElement("label", { htmlFor: "container", className: "flex flex-col gap-2 mb-2 w-full text-sm font-medium" }, "article"), React.createElement(QuillEditor, { disabled: i, onChange: h, value: r.content }), a.content && React.createElement("small", { className: "text-red" }, a.content)), React.createElement(ExternalLinks, { selectedLinks: r.links, onChange: v, value: r.links })) } import React, { useState } from "react"; export default function SelectItem({ id: e, name: t, icon: n, onClick: a }) { return React.createElement("button", { onClick: a, key: e, className: "flex gap-2 items-center cursor-pointer w-fit group hover:line-through hover:opacity-80 transition-opacity duration-300 ease-in-out" }, React.createElement("div", { className: "text-3xl fill-text", dangerouslySetInnerHTML: { __html: n } }), React.createElement("span", null, t)) } import React, { useState, useEffect, useRef } from "react"; import SelectItem from "./SelectItem.js"; export default function Technologies({ error: e, value: t, selectedTechnologies: n, onChange: a }) { const [l, i] = useState(!1), [o, c] = useState([]), s = useRef(null); useEffect(() => { r() }, []), useEffect(() => { if (0 !== o.length && t.length > 0) { let e = []; for (let n of t) { const t = o.find(e => e.id == n.id); if (!t) return; e.push(t) } a(e) } }, [o]); const r = async () => { const e = await fetch("/technology"), t = await e.json(); c(t) }, u = e => { const t = []; return e.forEach(e => { n.find(t => t.id == e.id) || t.push(React.createElement("option", { value: e.id }, e.name)) }), 0 == t.length && t.push(React.createElement("option", { value: "" }, "aucune technologie")), t }, m = () => { if ("" == s.current.value) return; const e = o.find(e => e.id == s.current.value); a([...n, e]) }, d = e => { a(n.filter(t => t.id != e)) }, f = e => e.map(e => React.createElement(SelectItem, { id: e.id, name: e.name, icon: e.svg, onClick: () => d(e.id) })), g = () => { i(!l) }; return React.createElement("div", null, React.createElement("label", { htmlFor: "container", className: "flex flex-col gap-2 mb-2 w-full text-sm font-medium" }, "technologies"), !l && React.createElement("button", { onClick: g, className: "hover:text-button" }, "+ ajouter une technologie"), l && React.createElement("div", { className: "flex gap-4  max-sm:flex-col" }, React.createElement("select", { ref: s, name: "technologie", id: "technologie", className: "max-w-40 w-full h-10 bg-primary border-stroke border-[1px] rounded-md px-4" }, u(o)), React.createElement("div", { className: "flex gap-2" }, React.createElement("button", { className: "hover:text-button  transition-colors duration-200 ease-in-out", onClick: () => { m(), g() } }, "confirmer"), React.createElement("button", { className: "hover:text-button opacity-50 transition-colors duration-200 ease-in-out", onClick: g }, "annuler"))), n && React.createElement("div", { className: "flex flex-wrap w-full gap-2 mt-4" }, f(n)), e && React.createElement("small", { className: "text-red " }, "Vous devez ajouter au moins une technologie")) }